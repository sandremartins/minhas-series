{"version":3,"sources":["Header.js","Generos.js","NovoGenero.js","EditarGenero.js","Series.js","NovaSerie.js","InfoSerie.js","App.js","serviceWorker.js","index.js"],"names":["Header","useState","open","setOpen","Navbar","color","light","expand","className","NavbarBrand","tag","Link","to","NavbarToggler","onClick","Collapse","isOpen","navbar","Nav","NavItem","NavLink","Generos","data","setData","useEffect","axios","get","then","res","length","role","scope","map","record","key","id","name","delete","filtrado","filter","item","NovoGenero","setName","success","setSuccess","htmlFor","type","value","onChange","evt","target","placeholder","post","EditarGenero","match","params","put","Series","NovaSerie","InfoSerie","form","setForm","mode","setMode","genres","setGenres","genreId","setGenreId","encontrado","find","genre","masterHeader","height","minHeight","backgroundImage","background","backgroundSize","backgroundPosition","backgroundRepeat","field","seleciona","status","style","alt","src","poster","Badge","comments","checked","genre_id","Home","App","path","exact","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.92cd17c3.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport {\n    Navbar,\n    NavbarBrand,\n    Collapse,\n    Nav,\n    NavItem,\n    NavLink,\n    NavbarToggler\n} from \"reactstrap\";\nimport { Link } from 'react-router-dom'\n\nconst Header = () => {\n    const [open, setOpen] = useState(false)\n    const toggle = () => {\n        setOpen(!open)\n    }\n    return (\n        <Navbar color='light' light expand='md'>\n            <div className='container'>\n                <NavbarBrand tag={Link} to='/'>Minhas SÃ©ries</NavbarBrand>\n                <NavbarToggler onClick={toggle} />\n                <Collapse isOpen={open} navbar>\n                    <Nav className='ml-auto' navbar>\n                        <NavItem>\n                            <NavLink tag={Link} to='/series'>SÃ©ries</NavLink>\n                        </NavItem>\n                        <NavItem>\n                            <NavLink tag={Link} to='/generos'>Generos</NavLink>\n                        </NavItem>\n                    </Nav>\n                </Collapse>\n            </div>\n        </Navbar>\n    )\n}\nexport default Header","import React, { useState, useEffect } from 'react'\nimport axios from 'axios'\nimport { Link } from 'react-router-dom'\n\nconst Generos = () => {\n    const [data, setData] = useState([])\n    useEffect(() => {\n        axios\n            .get('api/genres')\n            .then(res => {\n                setData(res.data.data)\n            })\n    }, [])\n\n    const deleteGenero = id => {\n        axios\n            .delete('/api/genres/' + id)\n            .then(res => {\n                const filtrado = data.filter(item => item.id !== id)\n                setData(filtrado)\n            })\n    }\n\n    const renderizaLinha = record => {\n        return (\n            <tr key={record.id}>\n                <th scope='row'>{record.id}</th>\n                <td>{record.name}</td>\n                <td>\n                    <button className='btn btn-danger' onClick={() => deleteGenero(record.id)}>Remover</button>\n                    <Link to={'/generos/' + record.id} className='btn btn-warning'>Editar</Link>\n                </td>\n            </tr>\n        )\n    }\n\n    if (data.length === 0) {\n        return (\n            <div className='container'>\n                <h1>GÃªneros</h1>\n                <div><Link to='/generos/novo' className='btn btn-primary'>Novo gÃªnero</Link></div>\n                <div className='alert alert-warning' role='alert'>\n                    VocÃª nÃ£o possui genÃªros criados\n                </div>\n            </div>\n        )\n    }\n\n    return (\n        <div className='container'>\n            <h1>GÃªneros</h1>\n            <div><Link to='/generos/novo' className='btn btn-primary'>Novo gÃªnero</Link></div>\n            <table className='table table-dark'>\n                <thead>\n                    <tr>\n                        <th scope='col'>ID</th>\n                        <th scope='col'>Nome</th>\n                        <th scope='col'>AÃ§Ãµes</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {data.map(renderizaLinha)}\n                </tbody>\n            </table>\n        </div>\n    )\n}\nexport default Generos","import React, { useState } from 'react'\nimport axios from 'axios'\nimport { Redirect } from 'react-router-dom'\n\nconst NovoGenero = () => {\n    const [name, setName] = useState('')\n    const [success, setSuccess] = useState(false)\n    const onChange = evt => {\n        setName(evt.target.value)\n    }\n    const save = () => {\n        axios\n            .post('/api/genres', {\n                name\n            })\n            .then(res => {\n                setSuccess(true)\n            })\n    }\n    if (success) {\n        return <Redirect to='/generos' />\n    }\n    return (\n        <div className='container'>\n            <h1>Novo GÃªneros</h1>\n            <form>\n                <div className='form-group'>\n                    <label htmlFor='name'>Nome</label>\n                    <input type='text' value={name} onChange={onChange} className='form-control' id='name' placeholder='Nome do GÃªnero'/>\n                </div>\n                <button type='button' onClick={save} className='btn btn-primary'>Salvar</button>\n            </form>\n        </div>\n    )\n}\nexport default NovoGenero","import React, { useState, useEffect } from 'react'\nimport axios from 'axios'\nimport { Redirect } from 'react-router-dom'\n\nconst EditarGenero = ({ match }) => {\n    const [name, setName] = useState('')\n    const [success, setSuccess] = useState(false)\n\n    useEffect(() => {\n        axios\n            .get('/api/genres/' + match.params.id)\n            .then(res => {\n                setName(res.data.name)\n            })\n    }, [match.params.id])\n\n    const onChange = evt => {\n        setName(evt.target.value)\n    }\n    const save = () => {\n        axios\n            .put('/api/genres/' + match.params.id, {\n                name\n            })\n            .then(res => {\n                setSuccess(true)\n            })\n    }\n    if (success) {\n        return <Redirect to='/generos' />\n    }\n    return (\n        <div className='container'>\n            <h1>Editar GÃªneros</h1>\n            <form>\n                <div className='form-group'>\n                    <label htmlFor='name'>Nome</label>\n                    <input type='text' value={name} onChange={onChange} className='form-control' id='name' placeholder='Nome do GÃªnero'/>\n                </div>\n                <button type='button' onClick={save} className='btn btn-primary'>Salvar</button>\n            </form>\n        </div>\n    )\n}\nexport default EditarGenero","import React, { useState, useEffect } from 'react'\nimport axios from 'axios'\nimport { Link } from 'react-router-dom'\n\nconst Series = () => {\n    const [data, setData] = useState([])\n    useEffect(() => {\n        axios\n            .get('api/series')\n            .then(res => {\n                setData(res.data.data)\n            })\n    }, [])\n\n    const deleteSerie = id => {\n        axios\n            .delete('/api/series/' + id)\n            .then(res => {\n                const filtrado = data.filter(item => item.id !== id)\n                setData(filtrado)\n            })\n    }\n\n    const renderizaLinha = record => {\n        return (\n            <tr key={record.id}>\n                <th scope='row'>{record.id}</th>\n                <td>{record.name}</td>\n                <td>\n                    <button className='btn btn-danger' onClick={() => deleteSerie(record.id)}>Remover</button>\n                    <Link to={'/series/' + record.id} className='btn btn-warning'>Ibfo</Link>\n                </td>\n            </tr>\n        )\n    }\n\n    if (data.length === 0) {\n        return (\n            <div className='container'>\n                <h1>SÃ©ries</h1>\n                <div><Link to='/series/novo' className='btn btn-primary'>Nova sÃ©rie</Link></div>\n                <div className='alert alert-warning' role='alert'>\n                    VocÃª nÃ£o possui sÃ©ries criadas\n                </div>\n            </div>\n        )\n    }\n\n    return (\n        <div className='container'>\n            <h1>SÃ©ries</h1>\n            <div><Link to='/series/novo' className='btn btn-primary'>Nova sÃ©rie</Link></div>\n            <table className='table table-dark'>\n                <thead>\n                    <tr>\n                        <th scope='col'>ID</th>\n                        <th scope='col'>Nome</th>\n                        <th scope='col'>AÃ§Ãµes</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {data.map(renderizaLinha)}\n                </tbody>\n            </table>\n        </div>\n    )\n}\nexport default Series","import React, { useState } from 'react'\nimport axios from 'axios'\nimport { Redirect } from 'react-router-dom'\n\nconst NovaSerie = () => {\n    const [name, setName] = useState('')\n    const [success, setSuccess] = useState(false)\n    const onChange = evt => {\n        setName(evt.target.value)\n    }\n    const save = () => {\n        axios\n            .post('/api/series', {\n                name\n            })\n            .then(res => {\n                setSuccess(true)\n            })\n    }\n    if (success) {\n        return <Redirect to='/series' />\n    }\n    return (\n        <div className='container'>\n            <h1>Nova SÃ©ries</h1>\n            <form>\n                <div className='form-group'>\n                    <label htmlFor='name'>Nome</label>\n                    <input type='text' value={name} onChange={onChange} className='form-control' id='name' placeholder='Nome da SÃ©rie'/>\n                </div>\n                <button type='button' onClick={save} className='btn btn-primary'>Salvar</button>\n            </form>\n        </div>\n    )\n}\nexport default NovaSerie","import React, { useState, useEffect } from 'react'\nimport axios from 'axios'\nimport { Redirect } from 'react-router-dom'\nimport { Badge } from 'reactstrap'\n\nconst InfoSerie = ({ match }) => {\n    const [form, setForm] = useState({\n        name: ''\n    })\n    const [success, setSuccess] = useState(false)\n    const [mode, setMode] = useState('INFO')\n    const [genres, setGenres] = useState([])\n    const [genreId, setGenreId] = useState('')\n\n    const [data, setData] = useState({})\n    useEffect(() => {\n        axios\n            .get('/api/series/' + match.params.id)\n            .then(res => {\n                setData(res.data)\n                setForm(res.data)\n            })\n    }, [match.params.id])\n\n    useEffect(() => {\n        axios\n            .get('/api/genres')\n            .then(res => {\n                setGenres(res.data.data)\n                const genres = res.data.data\n                const encontrado = genres.find(value => data.genre === value.name)\n                if (encontrado) {\n                    setGenreId(encontrado.id)\n                }\n            })\n    }, [data])\n\n    // custom header\n    const masterHeader = {\n        height: '50vh',\n        minHeight: '500px',\n        backgroundImage: `url('${data.background}')`,\n        backgroundSize: 'cover',\n        backgroundPosition: 'center',\n        backgroundRepeat: 'no-repeat'\n    }\n\n    const onChangeGenre = evt => {\n        setGenreId(evt.target.value)\n    }\n\n    const onChange = field => evt => {\n        setForm({\n            ...form,\n            [field]: evt.target.value\n        })\n    }\n\n    const seleciona = value => () => {\n        setForm({\n            ...form,\n            status: value\n        })\n    }\n\n    const save = () => {\n        axios\n            .put('/api/series/' + match.params.id, {\n                ...form,\n                genre_id: genreId\n            })\n            .then(res => {\n                setSuccess(true)\n            })\n    }\n    if (success) {\n        return <Redirect to='/series' />\n    }\n    return (\n        <div>\n            <header style={masterHeader}>\n                <div className='h-100' style={{ background: 'rgba(0,0,0,0.7)' }}>\n                    <div className='h-100 container'>\n                        <div className='row h-100 align-items-center'>\n                            <div className='col-3'>\n                                <img alt={data.name} className='img-fluid img-thumbnail' src={data.poster} />\n                            </div>\n                            <div className='col-8'>\n                                <h1 className='font-weight-light text-white'>{data.name}</h1>\n                                <div className='lead text-white'>\n                                    { data.status === 'ASSISTIDO' && <Badge color='success'>Assistido</Badge> }\n                                    { data.status === 'PARA_ASSISTIR' && <Badge color='warning'>Para assistir</Badge> }\n                                    GÃªnero: {data.genre}\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </header>\n            <div className='container'>\n                <button className='btn btn-primary' onClick={() => setMode('EDIT')}>Editar sÃ©rie</button>\n            </div>\n            {\n                mode === 'EDIT' &&\n                <div className='container'>\n                    <h1>Editar SÃ©rie</h1>\n                    <button className='btn btn-primary' onClick={() => setMode('INFO')}>Cancelar ediÃ§Ã£o</button>\n                    <form>\n                        <div className='form-group'>\n                            <label htmlFor='name'>Nome</label>\n                            <input type='text' value={form.name} onChange={onChange('name')} className='form-control' id='name' placeholder='Nome da SÃ©rie' />\n                        </div>\n                        <div className='form-group'>\n                            <label htmlFor='name'>ComentÃ¡rios</label>\n                            <input type='text' value={form.comments} onChange={onChange('comments')} className='form-control' id='name' placeholder='Nome da SÃ©rie' />\n                        </div>\n                        <div className='form-group'>\n                            <label htmlFor='name'>GÃªnero</label>\n                            <select className='form-control' onChange={onChangeGenre} value={genreId}>\n                                {genres.map(genre => <option key={genre.id} value={genre.id}>{genre.name}</option>)}\n                            </select>\n                        </div>\n                        <div className='form-check'>\n                            <input className='form-check-input' type='radio' checked={form.status === 'ASSISTIDO'} name='status' id='assistido' value='ASSISTIDO' onChange={seleciona('ASSISTIDO')} />\n                            <label className='form-check-label' htmlFor='assistido'>\n                                Assistido\n                            </label>\n                        </div>\n                        <div className='form-check'>\n                            <input className='form-check-input' type='radio' checked={form.status === 'PARA_ASSISTIR'} name='status' id='paraAssistir' value='PARA_ASSISTIR' onChange={seleciona('PARA_ASSISTIR')} />\n                            <label className='form-check-label' htmlFor='paraAssistir'>\n                                Para assistir\n                            </label>\n                        </div>\n                        <button type='button' onClick={save} className='btn btn-primary'>Salvar</button>\n                    </form>\n                </div>\n            }\n        </div>\n    )\n}\nexport default InfoSerie","import React from \"react\";\nimport Header from './Header'\nimport Generos from './Generos'\nimport NovoGenero from './NovoGenero'\nimport EditarGenero from './EditarGenero'\nimport Series from './Series'\nimport NovaSerie from './NovaSerie'\nimport InfoSerie from './InfoSerie'\n\nimport {\n  BrowserRouter as Router,\n  Route,\n  Switch\n} from 'react-router-dom'\n\nconst Home = () => {\n  return <h1>Home</h1>\n}\n\nfunction App() {\n\n  return (\n    <Router>\n      <div className=\"App\">\n        <Header />\n        <Switch>\n          <Route path='/' exact component={Home} />\n          <Route path='/generos' exact component={Generos} />\n          <Route path='/generos/novo' exact component={NovoGenero} />\n          <Route path='/generos/:id' exact component={EditarGenero} />\n          <Route path='/series' exact component={Series} />\n          <Route path='/series/novo' exact component={NovaSerie} />\n          <Route path='/series/:id' exact component={InfoSerie} />\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nReactDOM.render(<App />,document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}